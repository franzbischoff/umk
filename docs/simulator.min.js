var tempModel;importScripts("lib.min.js"),importScripts("dependencies/mathjs/math.min.js"),importScripts("dependencies/augmented-json-serialization-functions.js"),onmessage=function(t){if("object"==typeof t.data){let e=Object.keys(t.data);for(let s=0;s<e.length;s++)switch(e[s]){case"cells":exec.setCells(t.data.cells);break;case"updateCell":exec.updCell(t.data.updateCell.v,t.data.updateCell.i);break;case"simSettings":exec.setSimSettings(t.data.simSettings);break;case"start":exec.start();break;case"stop":exec.stop();break;case"pause":exec.pause();break;case"steps":exec.steps()}}else exec.start()};const exec={cells:[],simSettings:{hs:5,h:5e3,T:5,realtime:!1,steps:1},t:0,prevT:0,isCont:!0,inPrg:!1,rSteps:0,setSimSettings:function(t){this.simSettings.hs=t.h/1e3,this.simSettings.h=t.h,this.simSettings.T=t.T<0?1/0:t.T,this.simSettings.realtime=t.realtime,this.simSettings.steps=t.steps,this.inPrg&&this.setRemainingSteps()},setParams:function(t){try{if(t.Parameters){let e=Object.keys(t.Parameters);for(let s=0;s<e.length;s++)"Complex"!==t.Parameters[e[s]].Type&&"real"!==t.Parameters[e[s]].Type&&"Integer"!==t.Parameters[e[s]].Type||(t.Parameters[e[s]].Value=math.evaluate(t.Parameters[e[s]].Value))}}catch(t){console.log(t)}},setCells:function(vals){this.cells=vals.map(ele=>(eval("var tempModel = new "+ele.id+"(ele);"),this.setParams(tempModel),tempModel))},updCell:function(value,index){eval("var tempModel = new "+value.id+"(value);"),this.setParams(tempModel),this.cells[index]=tempModel},simulate:function(){this.tempVar++,this.t+=this.simSettings.hs},Init:function(){this.cells.forEach(function(t){t.Init()}),this.inPrg=!0,this.t=0,this.prevT=performance.now(),this.setRemainingSteps()},End:function(){this.cells.forEach(function(t){t.End()}),this.inPrg=!1,console.log(this.t)},loop:function(t=null){if(!t){let e=1/this.simSettings.hs;t=Math.max(0,Math.min(e,this.rSteps))}console.log("N: "+t);for(let e=0;e<t;e++){if(this.simSettings.realtime){for(;performance.now()-this.prevT<this.simSettings.h;);this.prevT=performance.now()}this.simulate(),this.rSteps--}this.rSteps<=0?this.End():this.isCont&&setTimeout(()=>{this.loop()},0)},setRemainingSteps:function(){this.rSteps=Math.ceil((this.simSettings.T-this.t)/this.simSettings.hs)+1,console.log(this.simSettings),console.log(this.rSteps)},start:function(){this.inPrg||this.Init(),this.isCont=!0,this.loop()},stop:function(){this.rSteps=0},pause:function(){this.isCont=!1},steps:function(){this.inPrg||this.Init(),this.isCont=!1,this.loop(this.simSettings.steps)}};